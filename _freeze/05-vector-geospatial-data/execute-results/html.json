{
  "hash": "007bab3a4c46bc6580ec18925595d532",
  "result": {
    "engine": "knitr",
    "markdown": "---\nknitr: \n    opts_chunk: \n      code-fold: show\n      results: hold\n  \n---\n\n\n\n\n# Vector Geospatial Data {#sec-chap05}\n\n\n\n\n\n\n\n\n\n\n\n\n\n::::: {#obj-chap05}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nChapter section list\n:::\n\n::: {.my-objectives-container}\n\n1. Import geospatial data: @sec-05-import-geodata\n2. Creating simple maps: @sec-05-create-maps\n3. Overlaying vector datasets: @sec-05-overlaying-vector-datasets\n4. Save spatial geodata files: @sec-05-save-geodata\n5. Choropleth maps: @sec-05-choropleth-maps\n\n\n\n:::\n::::\n:::::\n\n## Import Geospatial Data {#sec-05-import-geodata}\n\n### ESRI shapefile format\n\nThe data for import in chapter 5 are provided in <a class='glossary' title='ESRI (Environmental Systems Research Institute) is a private American company that specializes in geographic information system (GIS) software, location intelligence, and mapping technology. ESRI’s flagship product is ArcGIS, a comprehensive GIS software suite that includes tools for data management, analysis, and visualization.'>ESRI</a> shapefile format. This format was developed several decades ago but remains one of the widely used file formats for vector geospatial data. It is a multiple file format, where separate files contain the feature geometries, attribute table, spatial indices, and coordinate reference system.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-import-geospatial-data}\n: Import Geospatial Data\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nglue::glue(\"############### import esri data #############\")\nokcounty <- sf::st_read(\"data/05-chap/ok_counties.shp\", quiet = TRUE)\ntpoint <- sf::st_read(\"data/05-chap/ok_tornado_point.shp\", quiet = TRUE)\ntpath <- sf::st_read(\"data/05-chap/ok_tornado_path.shp\", quiet = TRUE)\n\nglue::glue(\"\")\nglue::glue(\"############### show data class #############\")\nclass(okcounty)\n\nglue::glue(\"\")\nglue::glue(\"############### show data with dplyr #############\")\ndplyr::glimpse(okcounty)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ############### import esri data #############\n#> \n#> ############### show data class #############\n#> [1] \"sf\"         \"data.frame\"\n#> \n#> ############### show data with dplyr #############\n#> Rows: 77\n#> Columns: 8\n#> $ STATEFP  <chr> \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"…\n#> $ COUNTYFP <chr> \"077\", \"025\", \"011\", \"107\", \"105\", \"153\", \"001\", \"053\", \"059\"…\n#> $ COUNTYNS <chr> \"01101826\", \"01101800\", \"01101793\", \"01101841\", \"01101840\", \"…\n#> $ AFFGEOID <chr> \"0500000US40077\", \"0500000US40025\", \"0500000US40011\", \"050000…\n#> $ GEOID    <chr> \"40077\", \"40025\", \"40011\", \"40107\", \"40105\", \"40153\", \"40001\"…\n#> $ NAME     <chr> \"Latimer\", \"Cimarron\", \"Blaine\", \"Okfuskee\", \"Nowata\", \"Woodw…\n#> $ LSAD     <chr> \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"…\n#> $ geometry <POLYGON [°]> POLYGON ((-95.50766 35.0292..., POLYGON ((-103.0025 3…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n***\n\nThe {**sf**} objects contain a column called geometry. This is a special column that contains the geospatial information about the location of each feature. This column should not be modified directly. It is used by the functions in the {**sf**} package for geospatial data processing.\n\n\n\n\n::::\n:::::\n\n::: {.callout-note #nte-05-skimr}\n###### Using {skimr} with {sf}\n\nNormally I am using the `skimr::skim()` function for data summary. But for the {**sf**} data classes in the `geometry` column are no skimmers available. (Possible data types are: sfc_POINT, sfc_LINESTRING, sfc_POLYGON, sfc_MULTIPOINT, sfc_MULTILINESTRING, sfc_MULTIPOLYGON, and sfc_GEOMETRY.) In the above case the `class(okcounty$geometry)` = \"*sfc_POLYGON, sfc*\" and not user-defined for {**skimr**} The fall back to the \"character\" class is not useful. (`sfc` stands for \"simple feature list column\".)\n\nIt is possible to adapt {**skimr**} for working with user defined data types using `skimr::skim_with()`. Resources that explain how to do this are:\n\n- [Defining sfl’s for a package](https://docs.ropensci.org/skimr/articles/extending_skimr.html#defining-sfls-for-a-package): General article that explains how to generate and use with user defined data types. `sfl`stands for \"skimr function list\". It is a list-like data structure used to define custom summary statistics for specific data types.\n- [skim of {**sf**} objects](https://github.com/ropensci/skimr/issues/88): Discussion specific to the {**sf**} package.\n\nAt the moment I do not understand enough about the {**sf**} package to get into more details for writing an appropriate function. I wonder if there is not already a solution available as spatial data processing with R and the {**sf**} package is not an extremely rare use case.\n:::\n\n\nIn the R package {**sf**} (Simple Features), many functions are prefixed with `st_`. The `st_` prefix is inspired by [PostGIS](https://postgis.net/), which refers with the abbreviation to “spatial type”. This prefix is used consistently throughout {**sf**} to indicate that a function operates on spatial data. In the context of {**sf**}, `st_` serves as a namespace for spatial functions, allowing developers and users to easily identify and find functions related to spatial operations. This prefixing convention makes it simple to discover and use spatial functions.\n\nLooking at the file names I noticed: All files have the same filename with different extensions. There are always four files with the extensions `.dbf`, `.prj`, `.shp`, `.shx`. \n\nThe shapefiles are imported to {**sf**} objects using the `sf::st_read()` function. The `quiet = TRUE` argument suppresses output to the console when importing spatial datasets. It \n\nAn example for the output when using `quit = FALSE` (the default option) is:\n\n> Reading layer `ok_counties' from data source \n  `/Users/petzi/Documents/Meine-Repos/GDSWR/data/05-chap/ok_counties.shp' using driver `ESRI Shapefile'  \nSimple feature collection with 77 features and 7 fields  \nGeometry type: POLYGON  \nDimension:     XY  \nBounding box:  xmin: -103.0025 ymin: 33.62184 xmax: -94.43151 ymax: 37.00163  \nGeodetic CRS:  NAD83\n\nTo read in a shapefile, it is only necessary to specify the filename with a `.shp` extension. However, all the files, including the `.shp` file as well as the `.dbf`, `.shx`, and `.prj` files, need to be present in the directory from which the data are read.\n\n- The `ok_counties.shp` dataset contains county boundaries for the state of  Oklahoma. \n- The `ok_tornado_point.shp` dataset and the `ok_tornado_path.shp`  dataset contain historical information about tornadoes in Oklahoma. \n    - The points are the initial locations of tornado touchdown. \n    - The paths are lines that identify the path of each tornado after touchdown.\n- These data were derived from larger, national-level datasets generated by the National Oceanographic and Atmospheric Administration (NOAA) [National Weather Service Storm Prediction Center](https://www.spc.noaa.gov/gis/svrgis/).\n\n### Conversion data sf <-> sp\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-data-conversion-sf-sp}\n: {**sf**} data to {**sp**} data and reverse\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nglue::glue(\"############### convert from sf to sp data #############\")\nokcounty_sp <- sf::as_Spatial(okcounty) # sf::as(okcounty, 'Spatial') does not work!\nclass(okcounty_sp)\n\nglue::glue(\"\")\nglue::glue(\"############### convert from sp to sf data #############\")\nokcounty_sf <- sf::st_as_sf(okcounty_sp)\nclass(okcounty_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ############### convert from sf to sp data #############\n#> [1] \"SpatialPolygonsDataFrame\"\n#> attr(,\"package\")\n#> [1] \"sp\"\n#> \n#> ############### convert from sp to sf data #############\n#> [1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::::\n:::::\n\n## Creating simple maps {#sec-05-create-maps}\n\n### Draw Oklahoma county boundaries\n\nTo generate a map of counties using `ggplot2::ggplot()` with a {**sf**} object, the `ggplot2::geom_sf()` function is used.\n\nFrom the view of the {**ggplot2**} package the `ggplot2::geom_sf()` is an unusual geom because it will draw different geometric objects depending on what simple features are present in the data: you can get points, lines, or polygons. For text and labels, you can use `ggplot2::geom_sf_text()` and `ggplot2::geom_sf_label()`.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-05-ploting-oklahoma-county-boundaries}\n: Plotting Oklahoma county boundaries\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### `ggplot2`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-oklahoma-county-boundaries-ggplot2}\n: Oklahoma county boundaries with {**ggplot2**}\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot(data = okcounty) +\n  ggplot2::geom_sf(fill = NA) +\n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![Oklahoma county boundaries plotted with {ggplot2}](05-vector-geospatial-data_files/figure-html/fig-05-oklahoma-county-boundaries-ggplot2-1.png){#fig-05-oklahoma-county-boundaries-ggplot2 width=672}\n:::\n:::\n\n\n\n\n\n***\n\n`fill = NA` makes the counties transparent.\n\n(To get the same result as in the base R approach I used `ggplot2::theme_void()` to hide the coordinates which is shown in the original book example.) \n\n::::\n:::::\n\n\n###### `base::plot()`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-oklahoma-county-boundaries-base-plot}\n: Oklahoma county boundaries with `base::plot()`\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ngraphics::par(mar = c(0, 0, 0, 0))\nbase::plot(okcounty$geometry)\n```\n\n::: {.cell-output-display}\n![Oklahoma county boundaries plotted with base::plot()](05-vector-geospatial-data_files/figure-html/fig-05-oklahoma-county-boundaries-base-plot-1.png){#fig-05-oklahoma-county-boundaries-base-plot width=672}\n:::\n:::\n\n\n\n\n\n***\n\nFrom R Graph Gallery I learend that I could also use bese R to plot spatial geodata. But everybody agrees that using {**ggplot2**} is the preferred approach.\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n::: {.callout-note #nte-05-too-much-white-space}\n###### Too much space around cholorpleth map\n\nAs you can see from both graphics there is ample space aorund the map. I do not know how to remove it. Therefore I wrote a [question on StackOverflow](https://stackoverflow.com/questions/79295599/remove-white-space-around-sf-ggplot2-choropleth-map). I used a simple example provide by the {**sf**} package.\n:::\n\n\n\n\n\n### Inspect `tpoint` and `tpath`\n\nBecause {**sf**} objects are a type of data frame, they can be modified using the normal {**tidyverse**} functions. Let's look at the two other R objects we've generated in @cnj-05-import-geospatial-data.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-05-show-tornado-file-structure}\n: Display structure of the tornado files\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### `tpoint`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-glimpse-tpoint}\n: Glimpse at `tpoint`\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ndplyr::glimpse(tpoint)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 4,092\n#> Columns: 23\n#> $ om       <dbl> 192, 27, 38, 57, 60, 61, 50, 52, 96, 108, 113, 117, 119, 76, …\n#> $ yr       <dbl> 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1…\n#> $ mo       <dbl> 10, 2, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, …\n#> $ dy       <dbl> 1, 27, 27, 28, 28, 28, 2, 3, 11, 16, 22, 24, 29, 4, 4, 4, 7, …\n#> $ date     <chr> \"1950-10-01\", \"1950-02-27\", \"1950-03-27\", \"1950-04-28\", \"1950…\n#> $ time     <chr> \"21:00:00\", \"10:20:00\", \"03:00:00\", \"14:17:00\", \"19:05:00\", \"…\n#> $ tz       <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n#> $ st       <chr> \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"…\n#> $ stf      <dbl> 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4…\n#> $ stn      <dbl> 23, 1, 2, 5, 6, 7, 3, 4, 15, 16, 17, 18, 19, 8, 9, 10, 11, 12…\n#> $ mag      <dbl> 1, 2, 2, 3, 4, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1…\n#> $ inj      <dbl> 0, 0, 0, 1, 32, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, …\n#> $ fat      <dbl> 0, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ loss     <dbl> 4, 4, 3, 5, 5, 4, 4, 3, 2, 3, 0, 4, 2, 4, 3, 5, 0, 4, 3, 4, 3…\n#> $ closs    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ slat     <dbl> 36.73, 35.55, 34.85, 34.88, 35.08, 34.55, 35.82, 36.13, 36.82…\n#> $ slon     <dbl> -102.52, -97.60, -95.75, -99.28, -96.40, -96.20, -97.02, -95.…\n#> $ elat     <dbl> 36.8800, 35.5501, 34.8501, 35.1700, 35.1300, 34.5501, 35.8201…\n#> $ elon     <dbl> -102.3000, -97.5999, -95.7499, -99.2000, -96.3500, -96.1999, …\n#> $ len      <dbl> 15.8, 2.0, 0.1, 20.8, 4.5, 0.8, 1.0, 1.0, 0.5, 7.3, 1.5, 1.0,…\n#> $ wid      <dbl> 10, 50, 77, 400, 200, 100, 100, 33, 77, 100, 100, 33, 33, 293…\n#> $ fc       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ geometry <POINT [°]> POINT (-102.52 36.73), POINT (-97.6 35.55), POINT (-95.…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n***\n\nThe points are the initial locations of tornado touchdowns.\n::::\n:::::\n\n\n###### `tpath`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-glimpse-tpath}\n: Glimpse at `tpath`\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ndplyr::glimpse(tpath)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 4,092\n#> Columns: 23\n#> $ om       <dbl> 192, 27, 38, 57, 60, 61, 50, 52, 96, 108, 113, 117, 119, 76, …\n#> $ yr       <dbl> 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1…\n#> $ mo       <dbl> 10, 2, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, …\n#> $ dy       <dbl> 1, 27, 27, 28, 28, 28, 2, 3, 11, 16, 22, 24, 29, 4, 4, 4, 7, …\n#> $ date     <chr> \"1950-10-01\", \"1950-02-27\", \"1950-03-27\", \"1950-04-28\", \"1950…\n#> $ time     <chr> \"21:00:00\", \"10:20:00\", \"03:00:00\", \"14:17:00\", \"19:05:00\", \"…\n#> $ tz       <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n#> $ st       <chr> \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"…\n#> $ stf      <dbl> 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 4…\n#> $ stn      <dbl> 23, 1, 2, 5, 6, 7, 3, 4, 15, 16, 17, 18, 19, 8, 9, 10, 11, 12…\n#> $ mag      <dbl> 1, 2, 2, 3, 4, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1…\n#> $ inj      <dbl> 0, 0, 0, 1, 32, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0, …\n#> $ fat      <dbl> 0, 0, 0, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ loss     <dbl> 4, 4, 3, 5, 5, 4, 4, 3, 2, 3, 0, 4, 2, 4, 3, 5, 0, 4, 3, 4, 3…\n#> $ closs    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ slat     <dbl> 36.73, 35.55, 34.85, 34.88, 35.08, 34.55, 35.82, 36.13, 36.82…\n#> $ slon     <dbl> -102.52, -97.60, -95.75, -99.28, -96.40, -96.20, -97.02, -95.…\n#> $ elat     <dbl> 36.8800, 35.5501, 34.8501, 35.1700, 35.1300, 34.5501, 35.8201…\n#> $ elon     <dbl> -102.3000, -97.5999, -95.7499, -99.2000, -96.3500, -96.1999, …\n#> $ len      <dbl> 15.8, 2.0, 0.1, 20.8, 4.5, 0.8, 1.0, 1.0, 0.5, 7.3, 1.5, 1.0,…\n#> $ wid      <dbl> 10, 50, 77, 400, 200, 100, 100, 33, 77, 100, 100, 33, 33, 293…\n#> $ fc       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ geometry <LINESTRING [°]> LINESTRING (-102.52 36.73, ..., LINESTRING (-97.6 …\n```\n\n\n:::\n:::\n\n\n\n\n\n***\n\nThe paths are lines that identify the path of each tornado after touchdown.\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\nFrom `dplyr::glimpse()` we get an idea about the data structure. But we do not know the numeric span covered by the variable. This is especially important for our next task to focus on data from the last five years. We know from @exm-05-show-tornado-file-structure that the dataset starts with the year 1950 but we have no clue about the middle or end of the dataset.\n\nFor this reason I have designed a special functions that returns the first and last dataset and several random data. The default number of data shown is eight but this can be changed using a second parameter.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-05-show-random-tornado-data}\n: Show some random tornado data, including first and last record\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### `tpoint`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-show-random-tpoint-data}\n: Show random `tpoint` data\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\npb_glance_data(tpoint)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Simple feature collection with 10 features and 23 fields\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: -102.52 ymin: 34.23 xmax: -95.774 ymax: 36.8768\n#> Geodetic CRS:  NAD83\n#>     obs     om   yr mo dy       date     time tz st stf stn mag inj fat  loss\n#> 1     1    192 1950 10  1 1950-10-01 21:00:00  3 OK  40  23   1   0   0 4e+00\n#> 2   634    519 1960  8  9 1960-08-09 12:00:00  3 OK  40  96   0   0   0 1e+00\n#> 3  1098    261 1969  6 11 1969-06-11 15:00:00  3 OK  40  18   0   0   0 0e+00\n#> 4  1177    188 1971  4 26 1971-04-26 19:56:00  3 OK  40  11   0   0   0 0e+00\n#> 5  1252    189 1973  4 19 1973-04-19 23:45:00  3 OK  40  11   2   2   0 6e+00\n#> 6  2369    371 1996  3 24 1996-03-24 12:55:00  3 OK  40   1   0   0   0 0e+00\n#> 7  2609   1209 1999  5 31 1999-05-31 19:24:00  3 OK  40 110   1   0   0 1e-02\n#> 8  3218    300 2010  5 10 2010-05-10 18:28:00  3 OK  40  47   1   0   0 3e-03\n#> 9  4069 619637 2021  1 30 2021-01-30 13:46:00  3 OK  40   0  -9   0   0 0e+00\n#> 10 4092 620265 2021  7 10 2021-07-10 18:25:00  3 OK  40   0   1   0   0 5e+04\n#>    closs    slat      slon    elat      elon  len wid fc\n#> 1      0 36.7300 -102.5200 36.8800 -102.3000 15.8  10  0\n#> 2      0 34.2500  -98.2300 34.2501  -98.2299  0.1  10  1\n#> 3      0 36.4500  -98.0200 36.4501  -98.0199  0.1  10  0\n#> 4      0 36.6000  -96.1000 36.6001  -96.0999  0.1  10  0\n#> 5      0 34.7000  -97.3000 34.8700  -97.0800 16.8 250  0\n#> 6      0 34.2300  -97.2700 34.2300  -97.2700  0.1  25  0\n#> 7      0 34.7700  -99.4500 34.7000  -99.4000  2.5 100  0\n#> 8      0 35.4239  -95.7757 35.4354  -95.7349  2.6 600  0\n#> 9      0 36.8768  -95.7740 36.8794  -95.7679  0.4  75  0\n#> 10     0 36.0880  -96.7200 36.0730  -96.7040  1.4 100  0\n#>                    geometry\n#> 1     POINT (-102.52 36.73)\n#> 2      POINT (-98.23 34.25)\n#> 3      POINT (-98.02 36.45)\n#> 4        POINT (-96.1 36.6)\n#> 5        POINT (-97.3 34.7)\n#> 6      POINT (-97.27 34.23)\n#> 7      POINT (-99.45 34.77)\n#> 8  POINT (-95.7757 35.4239)\n#> 9   POINT (-95.774 36.8768)\n#> 10    POINT (-96.72 36.088)\n```\n\n\n:::\n:::\n\n\n\n\n\n::::\n:::::\n\n\n###### `tpath`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-show-random-tpath-data}\n: Show random `tpath` data\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\npb_glance_data(tpath)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Simple feature collection with 10 features and 23 fields\n#> Geometry type: LINESTRING\n#> Dimension:     XY\n#> Bounding box:  xmin: -102.52 ymin: 34.23 xmax: -95.7349 ymax: 36.88\n#> Geodetic CRS:  NAD83\n#>     obs     om   yr mo dy       date     time tz st stf stn mag inj fat  loss\n#> 1     1    192 1950 10  1 1950-10-01 21:00:00  3 OK  40  23   1   0   0 4e+00\n#> 2   634    519 1960  8  9 1960-08-09 12:00:00  3 OK  40  96   0   0   0 1e+00\n#> 3  1098    261 1969  6 11 1969-06-11 15:00:00  3 OK  40  18   0   0   0 0e+00\n#> 4  1177    188 1971  4 26 1971-04-26 19:56:00  3 OK  40  11   0   0   0 0e+00\n#> 5  1252    189 1973  4 19 1973-04-19 23:45:00  3 OK  40  11   2   2   0 6e+00\n#> 6  2369    371 1996  3 24 1996-03-24 12:55:00  3 OK  40   1   0   0   0 0e+00\n#> 7  2609   1209 1999  5 31 1999-05-31 19:24:00  3 OK  40 110   1   0   0 1e-02\n#> 8  3218    300 2010  5 10 2010-05-10 18:28:00  3 OK  40  47   1   0   0 3e-03\n#> 9  4069 619637 2021  1 30 2021-01-30 13:46:00  3 OK  40   0  -9   0   0 0e+00\n#> 10 4092 620265 2021  7 10 2021-07-10 18:25:00  3 OK  40   0   1   0   0 5e+04\n#>    closs    slat      slon    elat      elon  len wid fc\n#> 1      0 36.7300 -102.5200 36.8800 -102.3000 15.8  10  0\n#> 2      0 34.2500  -98.2300 34.2501  -98.2299  0.1  10  1\n#> 3      0 36.4500  -98.0200 36.4501  -98.0199  0.1  10  0\n#> 4      0 36.6000  -96.1000 36.6001  -96.0999  0.1  10  0\n#> 5      0 34.7000  -97.3000 34.8700  -97.0800 16.8 250  0\n#> 6      0 34.2300  -97.2700 34.2300  -97.2700  0.1  25  0\n#> 7      0 34.7700  -99.4500 34.7000  -99.4000  2.5 100  0\n#> 8      0 35.4239  -95.7757 35.4354  -95.7349  2.6 600  0\n#> 9      0 36.8768  -95.7740 36.8794  -95.7679  0.4  75  0\n#> 10     0 36.0880  -96.7200 36.0730  -96.7040  1.4 100  0\n#>                          geometry\n#> 1  LINESTRING (-102.52 36.73, ...\n#> 2  LINESTRING (-98.23 34.25, -...\n#> 3  LINESTRING (-98.02 36.45, -...\n#> 4  LINESTRING (-96.1 36.6, -96...\n#> 5  LINESTRING (-97.3 34.7, -97...\n#> 6  LINESTRING (-97.27 34.23, -...\n#> 7  LINESTRING (-99.45 34.77, -...\n#> 8  LINESTRING (-95.7757 35.423...\n#> 9  LINESTRING (-95.774 36.8768...\n#> 10 LINESTRING (-96.72 36.088, ...\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n### Visualization of the Oklahoma tornado data (2016-2021)\n\nBecause {**sf**} objects are a type of data frame, they can be modified using the normal {**tidyverse**} functions.\n\n- A reduced dataset for the years 2016-2021 and only with the columns ID (`om`), the year (`yr`), and the date (`date`) and is prepared in the first tab `reduce data`.\n- Initiation points of tornadoes in Oklahoma from 2016–2021 is shown in tab `initiation points`.\n- Tab `tornados path` shows the paths of tornadoes in Oklahoma from 2016–2021.\n- Initiation points of tornadoes in Oklahoma from 2016–2021 with years represented by the color aesthetic is in tab `color aesthetic`.\n- In the final tab `facets` you will see the initiation points of tornadoes in Oklahoma from 2016–2021 with years mapped as separate facets. \n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-05-different-tornado-visualizations}\n: Show different visualization of the Oklahoma tornado data (2016-2021)\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### reduce data\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-reduce-tornado-data}\n: Filter data from 2016 to 2021 and select only three columns (ID, year and date)\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ntpoint_16_21 <- tpoint |> \n  dplyr::filter(yr >= 2016 & yr <= 2021) |> \n  dplyr::select(om, yr, date)\n\ntpath_16_21 <- tpath |> \n  dplyr::filter(yr >= 2016 & yr <= 2021)  |> \n  dplyr::select(om, yr, date)\n```\n:::\n\n\n\n\n\n<center>(*For this R code chunk is no output available*)</center>\n\n::::\n:::::\n\n\n###### initiation points\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-show-tornado-initation-points}\n: Show initiation points of tornadoes in Oklahoma from 2016–2021\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot() +\n  ggplot2::geom_sf(data = okcounty, fill = NA) +\n  ggplot2::geom_sf(data = tpoint_16_21)\n```\n\n::: {.cell-output-display}\n![Initiation points of tornadoes in Oklahoma from 2016–2021.](05-vector-geospatial-data_files/figure-html/fig-show-tornado-initation-points-1.png){#fig-show-tornado-initation-points width=672}\n:::\n:::\n\n\n\n\n\n***\n\n- Because each function maps a different dataset, the data argument must be provided in each `ggplot2::geom_sf()` function instead of in the `ggplot2::ggplot()` function. \n- I am using as default theme the `ggplot2::theme_bw()` function (see setup chunk of this chapter) to display the map over a white background while retaining the graticules.\n\n\n\n::::\n:::::\n\n###### tornado paths\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-show-tornado-paths}\n: Show tornadoes paths in Oklahoma from 2016–2021\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot() +                              \n  ggplot2::geom_sf(data = okcounty, fill = NA) + \n  ggplot2::geom_sf(data = tpath_16_21,           \n          color = \"red\",                         \n          size = 1)                              \n```\n\n::: {.cell-output-display}\n![Paths of tornadoes in Oklahoma from 2016-2021.](05-vector-geospatial-data_files/figure-html/fig-show-tornado-paths-1.png){#fig-show-tornado-paths width=672}\n:::\n:::\n\n\n\n\n***\n\nTo make the tornado path lines easier to see in relation to the county boundaries, they are displayed in red and their sizes are increased to be larger (size = 1) than the default line width of 0.5.\n\n\n::::\n:::::\n\n###### color aesthetic\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-tornado-with-color-aesthetic}\n: Initiation points of tornadoes in Oklahoma from 2016-2021 with years represented by the color aesthetic\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot() +\n  ggplot2::geom_sf(data = tpoint_16_21, \n          ggplot2::aes(color = forcats::as_factor(yr))) + # [1]\n  ggplot2::geom_sf(data = okcounty, fill = NA) +\n# ggplot2::scale_color_discrete(name = \"Year\") +          # [2]\n  ggokabeito::scale_color_okabe_ito(name = \"Year\") +      # [2]\n  ggplot2::coord_sf(datum = NA) +                         # [3]\n  ggplot2::theme_void()                                   # [3]\n```\n\n::: {.cell-output-display}\n![Initiation points of tornadoes in Oklahoma from 2016-2021 with years represented by the color aesthetic.](05-vector-geospatial-data_files/figure-html/fig-tornado-with-color-aesthetic-1.png){#fig-tornado-with-color-aesthetic width=672}\n:::\n:::\n\n\n\n\n***\n\nTo view the years of the tornadoes on the map, an aesthetic can be specified. \n\n**Line Comment 1**: In the book the color argument is specified as `base::as.factor(yr)` so that the year is displayed as a discrete variable instead of a continuous variable. Instead of the base function I have used `forcats::as_factor(yr)`.\n\n> Compared to base R, when x is a character, this function creates levels in the order in which they appear, which will be the same on every platform. (Base R sorts in the current locale which can vary from place to place.) (from the {**forcats**)} help file).\n\n\n**Line Comment 2**: The `ggplot2::scale_color_discrete()` function is used to set the legend name. But the used (standard) color scale is not appropriate for people with color-vision deficiency (<a class='glossary' title='Color vision deficiency (CVD) or color blindness (also spelled colour blindness) includes a wide range of causes and conditions and is actually quite complex. It’s a condition characterized by an inability or difficulty in perceiving and differentiating certain colors due to abnormalities in the three color-sensing pigments of the cones in the retina. (EnChroma)'>CVD</a>). I have therefore used `ggokabeito::scale_color_okabe_ito()`.\n\n\n**Line Comment 3**: The book says that the `ggplot2::theme_void()` function removes the plot axes and labels and shows only the map. I suppose that this is not correct. `ggplot2::coord_sf(datum = NA)` removes the plot axes and labels; `ggplot2::theme_void()` removes the border frame around the graphic.\n\n\n\n\n::::\n:::::\n\n###### facets\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-tornado-initiation-points-facets}\n: Initiation points of tornadoes in Oklahoma from 2016-2021 as facet visualization\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot() +\n  ggplot2::geom_sf(data = okcounty, \n          fill = NA, \n          color = \"gray\") +\n  ggplot2::geom_sf(data = tpoint_16_21, size = 0.75) +\n  ggplot2::facet_wrap(ggplot2::vars(yr), ncol = 2) +\n  ggplot2::coord_sf(datum = NA) +\n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![Initiation points of tornadoes in Oklahoma from 2016-2021 with years mapped as separate facets.](05-vector-geospatial-data_files/figure-html/fig-tornado-initiation-points-facets-1.png){#fig-tornado-initiation-points-facets width=672}\n:::\n:::\n\n\n\n\n\n***\n\nAlternately, `ggplot2::facet_wrap()` can be used to display the tornadoes for each year on a separate map. In comparison to the previous tab the sizes of the points are reduced slightly from the standard `size = 1` to `size = 0.75`, so that they are better suited for the smaller maps. \n\n::::\n:::::\n\n\n:::\n\n::::\n:::::\n\n\n::: {.callout-note #nte-too-much-horizontal-space}\nWith the exception of the facet graphics there is too much horizontal space above and below the {**sf**} graphic. Is this a known problem? How to reduce the horizontal space for {**sf**} graphics plotted with {**ggplot2**}?\n:::\n\n## Overlaying Vector Datasets {#sec-05-overlaying-vector-datasets}\n\n### A first spatial join\n\nThe number of tornado points in each county can be calculated using the `sf::st_join()` function to carry out a spatial join. A spatial join with {**sf**} is different from the joinwith {**dplyr**}: `sf::st_join()` links rows from the two tables based on the spatial locations instead of their attributes. \n\nIn this case the functions compares the point coordinates of the `tpoint_16_21` dataset in its `geometry` column with the polygon coordinates from the `geometry` column of the `okcounty` dataset. It joins `tpoint_16_21` with the `geometry` row that includes the appropriate polygon from `okcounty` containing the point coordinates. \n\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-spatial-join}\n: Overlaying vector datasets with a spatial join\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ncountypnt <- sf::st_join(tpoint_16_21, okcounty)  \n\ndplyr::glimpse(countypnt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 434\n#> Columns: 11\n#> $ om       <dbl> 613662, 613675, 613676, 613677, 613678, 613727, 613728, 61372…\n#> $ yr       <dbl> 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2…\n#> $ date     <chr> \"2016-03-23\", \"2016-03-30\", \"2016-03-30\", \"2016-03-30\", \"2016…\n#> $ STATEFP  <chr> \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"…\n#> $ COUNTYFP <chr> \"001\", \"113\", \"105\", \"131\", \"035\", \"139\", \"139\", \"139\", \"139\"…\n#> $ COUNTYNS <chr> \"01101788\", \"01101844\", \"01101840\", \"01101853\", \"01101805\", \"…\n#> $ AFFGEOID <chr> \"0500000US40001\", \"0500000US40113\", \"0500000US40105\", \"050000…\n#> $ GEOID    <chr> \"40001\", \"40113\", \"40105\", \"40131\", \"40035\", \"40139\", \"40139\"…\n#> $ NAME     <chr> \"Adair\", \"Osage\", \"Nowata\", \"Rogers\", \"Craig\", \"Texas\", \"Texa…\n#> $ LSAD     <chr> \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"…\n#> $ geometry <POINT [°]> POINT (-94.5042 35.6916), POINT (-96.0151 36.2151), POI…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::::\n:::::\n\n### Count tornados per county\n\nAfterward, each row in `countypnt` data contains additional columns from the `okcounty` dataset that correspond to the county that the tornado with it point coordinates is within. The dataset contains one record for each tornado. \n\nTo compute the total number of tornadoes per county, `countypnt` must be grouped by the `GEOID` county code or by the county `NAME` (here by `GEOID` county code). \n\nBut before grouping and summarizing, `countypnt` must be converted from an {**sf**} object to a normal data frame using `sf::st_drop_geometry()`.\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-count-tornados-per-county}\n: Count tornados per county\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nglue::glue(\"#### show class before `sf::st_drop_geometry()` #####\")\nbase::class(countypnt)\ncountypnt <- sf::st_drop_geometry(countypnt)\nglue::glue(\"\")\nglue::glue(\"##### show class after `sf::st_drop_geometry()` ######\")\nbase::class(countypnt)\n\n\ncountysum <- countypnt |> \n  dplyr::group_by(GEOID) |> \n  dplyr::summarize(tcnt = dplyr::n())  \n\nglue::glue(\"\")\nglue::glue(\"##### glimpse at the new summarized data frame` ######\")\ndplyr::glimpse(countysum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> #### show class before `sf::st_drop_geometry()` #####\n#> [1] \"sf\"         \"data.frame\"\n#> \n#> ##### show class after `sf::st_drop_geometry()` ######\n#> [1] \"data.frame\"\n#> \n#> ##### glimpse at the new summarized data frame` ######\n#> Rows: 75\n#> Columns: 2\n#> $ GEOID <chr> \"40001\", \"40005\", \"40007\", \"40009\", \"40011\", \"40013\", \"40015\", \"…\n#> $ tcnt  <int> 6, 3, 4, 8, 1, 4, 10, 5, 7, 5, 3, 12, 10, 5, 5, 1, 7, 9, 7, 8, 2…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::::\n:::::\n\n### Associate polygons with tornado counts\n\nIn the next step we join `okcounty` to `countysum` so that each polygon is associated with the appropriate tornado summary. \n\nIf there are between 2016-2021 several tornados per county than we get several rows.  \nBut the reverse is also true: If a county has had no tornado in the years 2016-2021 this county gets `NA` as the number of tornados. \n\nAs a matter of fact a few counties had no tornadoes during 2016–2021 and are therefore missing from `countysum`, resulting in `NA` values in the joined table. In this case, we know that `NA` means zero tornadoes, so the we must replace `NA` values by zeroes. The mutate() function computes the area of each county using st_area() and then calculates the density of tornadoes per county. Density is initially in tornadoes per square meter but is converted to tornadoes per 1000 km2. The st_area() function returns a column with explicit measurement units, but these are removed using the drop_units() function for simplicity\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-join-polygons-with-tornado-counts}\n: Associate each polygon with the appropriate tornado summary\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ncountymap <- okcounty   |>\n  dplyr::left_join(countysum, by = \"GEOID\")  |>        # [1]\n  dplyr::mutate(tcnt = \n        base::ifelse(base::is.na(tcnt), 0, tcnt)) |>   # [2]\n  dplyr::mutate(area = sf::st_area(okcounty),\n         tdens = 10^3 * 10^3 * tcnt / area)   |>       # [3]\n  units::drop_units()                                  # [4]\n\n\ndplyr::glimpse(countymap)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Rows: 77\n#> Columns: 11\n#> $ STATEFP  <chr> \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"40\", \"…\n#> $ COUNTYFP <chr> \"077\", \"025\", \"011\", \"107\", \"105\", \"153\", \"001\", \"053\", \"059\"…\n#> $ COUNTYNS <chr> \"01101826\", \"01101800\", \"01101793\", \"01101841\", \"01101840\", \"…\n#> $ AFFGEOID <chr> \"0500000US40077\", \"0500000US40025\", \"0500000US40011\", \"050000…\n#> $ GEOID    <chr> \"40077\", \"40025\", \"40011\", \"40107\", \"40105\", \"40153\", \"40001\"…\n#> $ NAME     <chr> \"Latimer\", \"Cimarron\", \"Blaine\", \"Okfuskee\", \"Nowata\", \"Woodw…\n#> $ LSAD     <chr> \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"06\", \"…\n#> $ tcnt     <dbl> 1, 12, 1, 10, 6, 2, 6, 0, 4, 9, 3, 10, 12, 1, 2, 8, 13, 4, 5,…\n#> $ geometry <POLYGON [°]> POLYGON ((-95.50766 35.0292..., POLYGON ((-103.0025 3…\n#> $ area     <dbl> 1890663261, 4766283042, 2427121029, 1657249513, 1503893122, 3…\n#> $ tdens    <dbl> 0.0005289149, 0.0025176851, 0.0004120108, 0.0060340944, 0.003…\n```\n\n\n:::\n:::\n\n\n\n\n\n***\n\n**Line comment 1**: Using `dplyr::left_join()` instead of `dplyr::inner_join()` ensures that all of the county polygons are retained in the output of the join. (`dplyr::inner_join()` only keeps observations from x that have a matching key in y, whereas `dplyr::left_join()` keeps all observations in x.)\n\n**Line comment 2**: If there are between 2016-2021 several tornados per county than we get several rows. But the reverse is also true: If a county has had no tornado in the years 2016-2021 this county gets `NA` values as the number of tornados. \n\nAs a matter of fact a few counties had no tornadoes during 2016–2021 and are therefore missing from `countysum`, resulting in `NA` values in the joined table. In this case, we know that `NA` means zero tornadoes, so the we must replace `NA` values by zeroes. I did this with the `dplyr::mutate()` function instead of `base::replace()`. Besides this approach does not need the `.` symbol of the {**magrittr**} packages (exporting into dplyr) for refering to the database (respectively its equivalent `_` for the R pipe). See for details @nte-chap03.\n\n**Line comment 3**: The second `dplyr::mutate()` function computes the area of each county using `sf::st_area()` and then calculates the density of tornadoes per county. Density is initially in tornadoes per square meter but is converted to tornadoes per 1000 km2. \n\n**Line comment 4**: The `sf::st_area()` function returns a column with explicit measurement units, but these are removed using the `units::drop_units()` function for simplicity. For more information see the vignettes and help pages of the {**units**} package. \n\n::::\n:::::\n\n## Save spatial geodata files {#sec-05-save-geodata}\n\n### ESRI format\n\nThe `sf::st_write()` function can be used to save sf objects to a variety of file formats. In many cases, the function can determine the output format from the output filename extension. The following code saves the county-level tornado summaries in ESRI shapefile format. The `append = FALSE` option overwrites the shapefile if it already exists.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-save-spatial-ESRI-format}\n: Save spatial data files into ESRI format\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nsf::st_write(countymap, \n         dsn = \"data/05-chap/oktornadosum.shp\", \n         append = FALSE)\n```\n:::\n\n\n\n\n\n\n\n::::\n:::::\n\nAfter a message what the script does \n\n> > Writing layer `oktornadosum' to data source \n  `data/05-chap/oktornadosum.shp' using driver `ESRI Shapefile'\n  Writing 77 features with 10 fields and geometry type Polygon.\n\nI got for every feature (= 77 rows) a warning message emitted by the GDAL library:\n\n> Warning: GDAL Message 1: Value 1890663260.74707699 of field area of feature 0 not successfully written. Possibly due to too larger number with respect to field width\n\nIt turned out that this is a [misleading warning](https://github.com/r-spatial/sf/issues/306) and that one should not use the old ESRI format but the newer and better Open Geospatial Consortium (OGC) GeoPackage format. See also [StackOverflow](https://stackoverflow.com/a/73242539/7322615) and the [answer from the {**sf**} developer](https://github.com/r-spatial/sf/issues/2368):\n\n> The general recommendation is to not use shapefiles: the format is not an open standard, it has many limitations and modern formats are available. A good alternative is GeoPackage.\n\n### GeoPackage format\n\nGeoPackage is also mentioned as an alternative in the book. The data are stored in an SQLite database that may contain one or more layers. In this example, the `delete_dsn = TRUE` argument overwrites the entire GeoPackage. Leaving this argument at its default value of `FALSE` would add a new layer to an existing database.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-save-spatial-geodata-in-GeoPackage-format}\n: Save spatial geodata in GeoPackage format\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nsf::st_write(countymap, \n         dsn = \"data/05-chap/oktornado.gpkg\", \n         layer = \"countysum\",\n         delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Deleting source `data/05-chap/oktornado.gpkg' using driver `GPKG'\n#> Writing layer `countysum' to data source \n#>   `data/05-chap/oktornado.gpkg' using driver `GPKG'\n#> Writing 77 features with 10 fields and geometry type Polygon.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n::::\n:::::\n\n### GeoJSON format\n\n\nAnother commonly-used open geospatial data format is GeoJSON. It is based on Javascript Object Notation (<a class='glossary' title='JSON (JavaScript Object Notation) is a standardized, text-based data interchange format used to represent structured data in a human-readable and machine-readable way. It is a lightweight, language-independent format that is widely used for exchanging data between web servers, web applications, and mobile apps.'>JSON</a>), a human-readable text format that stores data in ASCII files. The layer_options argument must be set to \"RFC7946 = YES\" to save the data in the newest GeoJSON specification.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-save-spatial-geodata-in-GeoJSON-format}\n: Save spatial geodata in GeoJSON format\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nsf::st_write(obj = countymap, \n             dsn = \"data/05-chap/oktornado.geojson\", \n             layer_options = \"RFC7946 = YES\",\n             delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Deleting source `data/05-chap/oktornado.geojson' using driver `GeoJSON'\n#> Writing layer `oktornado' to data source \n#>   `data/05-chap/oktornado.geojson' using driver `GeoJSON'\n#> options:        RFC7946 = YES \n#> Writing 77 features with 10 fields and geometry type Polygon.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n::::\n:::::\n\nHere again I had to add `delete_dsn = TRUE` (`append = FALSE` did not work for this format!). Otherwise I would get an error message that the dataset already exists.\n\n## Choropleth Maps {#sec-05-choropleth-maps}\n\n### Filling with colors (standard)\n\nAnother way to display the tornadoes is as a choropleth map, where summary statistics for each county are displayed as different colors. The county-level tornado density can be as a choropleth using the `fill` aesthetic with `ggplot2::geom_sf()`. By default, the fill colors are based on a dark-to-light blue color ramp. The `ggplot2::theme_void()` function eliminates the axes and graticules and displays only the map on a white background.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-choropleth-filled-colors}\n: Densities of tornadoes mapped as a choropleth.\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot(data = countymap) +\n  ggplot2::geom_sf(ggplot2::aes(fill = tdens)) +\n  ggplot2::theme_void() +\n  ggplot2::coord_sf()\n```\n\n::: {.cell-output-display}\n![Densities of tornadoes in Oklahoma counties from 2016-2021 mapped as a choropleth.](05-vector-geospatial-data_files/figure-html/fig-choropleth-filled-colors-1.png){#fig-choropleth-filled-colors width=672}\n:::\n:::\n\n\n\n\n\n\n::::\n:::::\n\n### Mapping symbols\n\nTo map symbols, the county polygons must first be converted to points. The `sf::st_centroid()` generates a point feature located at the centroid of each county. The `sf::st_geometry_type()` function returns the feature geometry type. Setting `by_geometry = FALSE` returns one geometry type for the entire dataset instead of for every feature.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-convert-county-polygons-to-points}\n: Convert county polygons to points\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nglue::glue(\"##### Return geometry type before converted to points #####\")\nsf::st_geometry_type(okcounty, by_geometry = FALSE)\n\n\n############# Return the centroid of a geometry\nokcntrd = sf::st_centroid(countymap)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Warning: st_centroid assumes attributes are constant over geometries\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"show\"}\nglue::glue(\"\")\nglue::glue(\"##### Return geometry type after converted to points #####\")\nsf::st_geometry_type(okcntrd, by_geometry = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ##### Return geometry type before converted to points #####\n#> [1] POLYGON\n#> 18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE\n#> \n#> ##### Return geometry type after converted to points #####\n#> [1] POINT\n#> 18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n::::\n:::::\n\n::: {.callout-note style=\"color: blue;\" #nte-05-attributes-constant-warning}\n###### How to get rid of the warning?\n\nAt the moment I do not know how to suppress the warning. Possible pointers to solve this problem are:\n\n- **sf GitHub**: [suppress specific warning message](https://github.com/r-spatial/sf/issues/406)\n- **Spatial Data Science**:  [Chapter 5](https://r-spatial.org/book/05-Attributes.html)\n\n> When, while manipulating geometries, attribute values are retained unmodified, support problems may arise. If we look into a simple case of replacing a county polygon with the centroid of that polygon on a dataset that has attributes, we see that R package sf issues a warning:\n>\n> *Warning: st_centroid assumes attributes are constant over geometries*\n:::\n\nThe tornado counts can be mapped using the `okcentrd` dataset with the `size` aesthetic. One point is plotted for each county centroid, and the size of the point is proportional to the number of tornadoes in the county.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-05-choropleth-mappying-symbols}\n: Choropleth map using graduated symbols\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggplot2::ggplot() +\n  ggplot2::geom_sf(data = okcntrd, ggplot2::aes(size = tcnt)) +\n  ggplot2::geom_sf(data = okcounty, fill = NA) +\n  ggplot2::theme_void()\n```\n\n::: {.cell-output-display}\n![Numbers of tornadoes in Oklahoma counties from 2016-2021 mapped as graduated symbols.](05-vector-geospatial-data_files/figure-html/fig-choropleth-mappying-symbols-1.png){#fig-choropleth-mappying-symbols width=672}\n:::\n:::\n\n\n\n\n\n\n\n::::\n:::::\n\n",
    "supporting": [
      "05-vector-geospatial-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}